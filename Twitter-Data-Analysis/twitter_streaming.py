#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun May 28 12:25:54 2017

@author: vivekparashar
"""

#Import the necessary methods from tweepy library
from tweepy.streaming import StreamListener
from tweepy import OAuthHandler
from tweepy import Stream

#Variables that contains the user credentials to access Twitter API 
access_token = "----"
access_token_secret = "----"
consumer_key = "----"
consumer_secret = "----"

#import csv   

#This is a basic listener that just prints received tweets to stdout.
class StdOutListener(StreamListener):

    def on_data(self, data):
        if 'text' in data:
            file = open('/Users/vivekparashar/Documents/python dsp jupyter notebook/trump_data2.txt', 'a')
            file.write(data) 
            file.close()
        #with open('/Users/vivekparashar/Documents/python dsp jupyter notebook/trump_data2.csv', 'w') as csvfile:
        #    tweetwriter = csv.writer(csvfile)
        #    tweetwriter.writerow([data])
        #print (data)
        return True

    def on_error(self, status):
        #print (status)
        return True


if __name__ == '__main__':

    #This handles Twitter authetification and the connection to Twitter Streaming API
    l = StdOutListener()
    auth = OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_token, access_token_secret)
    stream = Stream(auth, l)

    #This line filter Twitter Streams to capture data by the keywords: 'python', 'javascript', 'ruby'
    #stream.filter(track=['python', 'javascript', 'ruby'])

    #This line filter Twitter Streams to capture data by the keywords: 'MonacoGP'
    stream.filter(track=['trump'])




import json
import pandas as pd
import matplotlib.pyplot as plt


tweets_data_path = '/Users/vivekparashar/Documents/python dsp jupyter notebook/trump_data2.txt'

tweets_data = []
tweets_file = open(tweets_data_path, "r")
for line in tweets_file:
    try:
        tweet = json.loads(line)
        tweets_data.append(tweet)
    except:
        continue
    

#print the number of tweets
print (len(tweets_data))

import numpy as np
for i in np.arange(len(tweets_data)):
    print(tweets_data[i]['text'])

#structure the tweets data into a pandas DataFrame
#start by creating an empty DataFrame called tweets
tweets = pd.DataFrame()
tweets.loc[0:1,:] # print out first 2 tweets 
tweets.loc[0:1,'text'] # print out first 2 tweets, but only text

          
#add 3 columns to the tweets DataFrame called text, lang, and country. text column contains the tweet
tweets['text'] = list(map(lambda tweet: tweet.get['text',''], tweets_data))
tweets['text'] = list(map(lambda tweet: tweet['text'], tweets_data))
tweets['lang'] = list(map(lambda tweet: tweet['lang'], tweets_data))
#tweets['country'] = list(map(lambda tweet: tweet['place']['country'] if tweet['place'] != None else None, tweets_data))
tweets['retweet_count'] = list(map(lambda tweet: tweet['retweet_count'], tweets_data))
tweets['type'] = list(map(lambda tweet: tweet['type'], tweets_data))




"""
How about:

tweets['text'] = map(lambda tweet: tweet.get('text', ''), tweets_data)

Dictionary method .get() by default return None in case of missing key, but it might be any object. 
In this case tweet['text'] is possibly a string, so it might be a good idea to put empty for missing 
one.
"""


#create 2 charts: 
#The first one describing the Top 5 languages in which the tweets were written
tweets_by_lang = tweets['lang'].value_counts()

fig, ax = plt.subplots()
ax.tick_params(axis='x', labelsize=15)
ax.tick_params(axis='y', labelsize=10)
ax.set_xlabel('Languages', fontsize=15)
ax.set_ylabel('Number of tweets' , fontsize=15)
ax.set_title('Top 5 languages', fontsize=15, fontweight='bold')
tweets_by_lang[:5].plot(ax=ax, kind='bar', color='red')


#The second the Top 5 countries from which the tweets were sent
tweets_by_country = tweets['country'].value_counts()

fig, ax = plt.subplots()
ax.tick_params(axis='x', labelsize=15)
ax.tick_params(axis='y', labelsize=10)
ax.set_xlabel('Countries', fontsize=15)
ax.set_ylabel('Number of tweets' , fontsize=15)
ax.set_title('Top 5 countries', fontsize=15, fontweight='bold')
tweets_by_country[:5].plot(ax=ax, kind='bar', color='blue')


#new vs retweet
#The second the Top 5 countries from which the tweets were sent
retweet_count = tweets['type'].value_counts()

fig, ax = plt.subplots()
ax.tick_params(axis='x', labelsize=15)
ax.tick_params(axis='y', labelsize=10)
ax.set_xlabel('Tweet type', fontsize=15)
ax.set_ylabel('Number of tweets' , fontsize=15)
ax.set_title('tweet type - photo, video, etc.', fontsize=15, fontweight='bold')
retweet_count[:3].plot(ax=ax, kind='bar', color='blue')



'''
You usually run across the KeyError when Python cannot find a specified key. This is often the case with JSON generated by the Twitter API that certain fields/keys will not be present for some tweets.

Instead of :

tweets['text'] = map(lambda tweet: tweet['text'], tweets_data)

Replace this with:

tweets['text'] = map(lambda tweet: tweet.get('text', None),tweets_data)

Similarly, say you are looking for a key that is nested two or more levels deep, you can chain multiple .get() functions like below. 
tweets['child'] = map(lambda tweet: tweet.get('grandparent', {}).get('parent', {}).get('child') , tweets_data)

A more specific example: 
tweets['user'] = map(lambda tweet: tweet.get('user', {}).get('name'),tweets_data)
'''


#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jun  3 18:43:16 2017

@author: vivekparashar
"""

#Import the necessary methods from tweepy library
from tweepy.streaming import StreamListener
from tweepy import OAuthHandler
from tweepy import Stream

#Variables that contains the user credentials to access Twitter API 
access_token = "----"
access_token_secret = "----"
consumer_key = "----"
consumer_secret = "----"



#This is a basic listener that just prints received tweets to stdout.
class StdOutListener(StreamListener):

    def on_data(self, data):
        print (data)
        return True

    def on_error(self, status):
        print (status)


if __name__ == '__main__':

    #This handles Twitter authetification and the connection to Twitter Streaming API
    l = StdOutListener()
    auth = OAuthHandler(consumer_key, consumer_secret)
    auth.set_access_token(access_token, access_token_secret)
    stream = Stream(auth, l)

    #This line filter Twitter Streams to capture data by the keywords: 'python', 'javascript', 'ruby'
    stream.filter(track=['trump'])
    
import json
import pandas as pd
import matplotlib.pyplot as plt

tweets_data_path = '../twitter_data.txt'

tweets_data = []
tweets_file = open(tweets_data_path, "r")
for line in tweets_file:
    try:
        tweet = json.loads(line)
        tweets_data.append(tweet)
    except:
        continue
    
    